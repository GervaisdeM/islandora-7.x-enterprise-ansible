---
# milestone 2 - Installing Drupal
# --volume: {{ DRUPAL_HOME }}
# --volume: {{ DRUPAL_HOME }}/sites

- name: Set MySQL root password before installing
  debconf:
    name: 'mysql-server'
    question: 'mysql-server/root_password'
    value: '{{ MYSQL_ROOT_PASSWORD | quote }}'
    vtype: 'password'

- name: Confirm MySQL root password before installing
  debconf:
    name: 'mysql-server'
    question: 'mysql-server/root_password_again'
    value: '{{ MYSQL_ROOT_PASSWORD | quote }}'
    vtype: 'password'

- name: Install the "LAMP" stack
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 86400
  with_items:
    - apache2
    - apache2-bin
    - apache2-data
    - apache2-mpm-prefork
    - libaio1
    - libapr1
    - libaprutil1
    - libaprutil1-dbd-sqlite3
    - libaprutil1-ldap
    - libdbd-mysql-perl
    - libdbi-perl
    - libhtml-template-perl
    - libterm-readkey-perl
    - libwrap0
    - libdbi-perl
    - libapache2-mod-php5
    - libmysqlclient18
    - mysql-client-5.5
    - mysql-client-core-5.5
    - mysql-common
    - mysql-server
    - mysql-server-5.5
    - mysql-server-core-5.5
    - php5-cli
    - php5-common
    - php5-json
    - php5-mysql
    - php5-readline
    - ssl-cert
    - tcpd
  when: ansible_distribution_release == "trusty"

- name: Install the "LAMP" stack
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 86400
  with_items:
    - apache2
    - apache2-bin
    - apache2-data
    - apache2-utils
    - libapache2-mod-php
    - libapache2-mod-php7.0
    - libapr1
    - libaprutil1
    - libaprutil1-dbd-sqlite3
    - libaprutil1-ldap
    - libicu55
    - liblua5.1-0
    - libxml2
    - php-common
    - php-mysql
    - php7.0-cli
    - php7.0-common
    - php7.0-json
    - php7.0-mysql
    - php7.0-opcache
    - php7.0-readline
    - sgml-base
    - ssl-cert
    - xml-core
  when: ansible_distribution_release == "xenial"

- name: "Install Drush"
  get_url:
    url: "https://github.com/drush-ops/drush/releases/download/{{ DRUSH_VERSION }}/drush.phar"
    dest: "/usr/local/bin/drush"
    mode: "u=rwx,g=rx,o=rx"

- name: Install Drupal deps
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - php5-gd
    - php5-dev
    - php5-xsl
    - php-soap
    - php5-curl
    - php5-imagick
  when: ansible_distribution_release == "trusty"

- name: Install Drupal deps
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - php7.0-gd
    - php7.0-dev
    - php7.0-xsl
    - php7.0-soap
    - php7.0-curl
    - php-imagick
    - php7.0-mbstring
  when: ansible_distribution_release == "xenial"

- name: Install Drupal deps
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - imagemagick
    - lame
    - libimage-exiftool-perl
    - bibutils
    - poppler-utils
    - zip
    - unzip
    - tar
    - imagemagick
    - poppler-utils
    - ghostscript

- name: Download Drupal
  shell: "drush dl -y drupal-{{ DRUPAL_VERSION }} --drupal-project-rename={{ DRUPAL_PROJECT_RENAME }}"
  args:
    executable: /bin/bash
    chdir: /var/www/
    creates: "{{ DRUPAL_HOME }}/index.php"

- name: Enable rewrite module
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - rewrite
    - xml2enc
  register: apache_modules

- name: Reload apache
  service:
    name: apache2
    state: reloaded
  when: apache_modules.changed

- name: "Enable proxy module"
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  with_items:
    - { src: "/etc/apache2/mods-available/proxy.load", dest: "/etc/apache2/mods-enabled/proxy.load" }
    - { src: "/etc/apache2/mods-available/proxy_http.load", dest: "/etc/apache2/mods-enabled/proxy_http.load" }
    - { src: "/etc/apache2/mods-available/proxy_html.load", dest: "/etc/apache2/mods-enabled/proxy_html.load" }
    - { src: "/etc/apache2/mods-available/headers.load", dest: "/etc/apache2/mods-enabled/headers.load" }

- name: shellcheck disable=SC2162
  blockinfile:
    dest: "{{ APACHE_CONFIG_FILE }}"
    insertbefore: "^</VirtualHost>"
    block: |
        ServerAlias {{ APACHE_SERVER_ALIAS }}

        <Directory {{ DRUPAL_HOME }}>
          Options Indexes FollowSymLinks
          AllowOverride All
          Require all granted
        </Directory>

        ProxyRequests Off
        ProxyPreserveHost On

        <Proxy *>
          Order deny,allow
          Allow from all
        </Proxy>

        ProxyPass /fedora/get http://{{ FEDORA_HOSTNAME }}:8080/fedora/get
        ProxyPassReverse /fedora/get http://{{ FEDORA_HOSTNAME }}:8080/fedora/get
        ProxyPass /fedora/services http://{{ FEDORA_HOSTNAME }}:8080/fedora/services
        ProxyPassReverse /fedora/services http://{{ FEDORA_HOSTNAME }}:8080/fedora/services
        ProxyPass /fedora/describe http://{{ FEDORA_HOSTNAME }}:8080/fedora/describe
        ProxyPassReverse /fedora/describe http://{{ FEDORA_HOSTNAME }}:8080/fedora/describe
        ProxyPass /fedora/risearch http://{{ FEDORA_HOSTNAME }}:8080/fedora/risearch
        ProxyPassReverse /fedora/risearch http://{{ FEDORA_HOSTNAME }}:8080/fedora/risearch
        ProxyPass /adore-djatoka http://{{ DJATOKA_HOSTNAME }}:8080/adore-djatoka
        ProxyPassReverse /adore-djatoka http://{{ DJATOKA_HOSTNAME }}:8080/adore-djatoka
        
- name: Torch the default index.html
  file: 
    path: /var/www/html/index.html
    state: absent

### milestone 4 - Installing The "Tuque" library
- name: Download Tuque
  git:
    repo: "https://github.com/Islandora/{{ item }}"
    dest: "{{ DRUPAL_HOME }}/sites/all/libraries/{{ item }}"
    update: no
  with_items:
    - tuque

- name: Set git filemode false for git
  replace:
    regexp: "filemode = true"
    replace: "filemode = false"
    dest: "{{ DRUPAL_HOME }}/sites/all/libraries/{{ item }}/.git/config"
  with_items:
    - tuque

### milestone 5 - Installing the Islandora Essential Modules
## prerequisites modules
- name: Install the ImageMagick Drupal module 
  shell: "{{ item }}"
  with_items:
    - "wget -O /tmp/imagemagick.zip http://ftp.drupal.org/files/projects/imagemagick-7.x-1.0.zip"
    - "unzip /tmp/imagemagick.zip"
  args:
    executable: /bin/bash
    chdir: "{{ DRUPAL_HOME }}/sites/all/modules"
    creates: "{{ DRUPAL_HOME }}/sites/all/modules/imagemagick/imagemagick.module"

- name: Install Openseadragon library 
  shell: "{{ item }}"
  with_items:
    - "wget -O /tmp/openseadragon.zip http://openseadragon.github.io/releases/openseadragon-bin-0.9.129.zip"
    - "unzip /tmp/openseadragon.zip"
    - "mv openseadragon-bin-0.9.129 openseadragon"
  args:
    executable: /bin/bash
    chdir: "{{ DRUPAL_HOME }}/sites/all/libraries"
    creates: "{{ DRUPAL_HOME }}/sites/all/libraries/openseadragon/openseadragon.js"

- name: Install Tesseract
  apt:
    pkg: "{{ item }}"
    state: present
  with_items:
    - tesseract-ocr
    - tesseract-ocr-eng
    - tesseract-ocr-fra

## Setup the modules
- name: Download the modules
  git:
    repo: "https://github.com/Islandora/{{ item }}"
    dest: "{{ DRUPAL_HOME }}/sites/all/modules/{{ item }}"
    update: no
    # version: 7.x-1.5
  with_items:
    - islandora
    - islandora_solution_pack_collection
    - islandora_solution_pack_image
    - islandora_solution_pack_pdf
    - islandora_solr_facet_pages
    - islandora_solr_metadata
    - islandora_solr_search
    - islandora_solr_views
    - objective_forms
    - php_lib
    - islandora_xml_forms
    ### Enable Batch Ingest Files
    - islandora_batch
    - islandora_solution_pack_book
    - islandora_paged_content
    - islandora_solution_pack_large_image
    - islandora_ocr
    - islandora_book_batch
    - islandora_openseadragon
    - islandora_solution_pack_newspaper
    - islandora_newspaper_batch
    - islandora_internet_archive_bookreader
  register: islandora_modules

- name: Set git filemode false for git
  replace:
    regexp: "filemode = true"
    replace: "filemode = false"
    dest: "{{ DRUPAL_HOME }}/sites/all/modules/{{ item }}/.git/config"
  with_items:
    - islandora
    - islandora_solution_pack_collection
    - islandora_solution_pack_image
    - islandora_solution_pack_pdf
    - islandora_solr_facet_pages
    - islandora_solr_metadata
    - islandora_solr_search
    - islandora_solr_views
    - objective_forms
    - php_lib
    - islandora_xml_forms
    ### Enable Batch Ingest Files
    - islandora_batch
    - islandora_solution_pack_book
    - islandora_paged_content
    - islandora_solution_pack_large_image
    - islandora_ocr
    - islandora_book_batch
    - islandora_openseadragon
    - islandora_solution_pack_newspaper
    - islandora_newspaper_batch
    - islandora_internet_archive_bookreader

- block:
    - name: Install uploadprogress
      pear:
        name: pecl/uploadprogress
        state: present

    - name: Configure
      lineinfile:
        insertafter: 'extension_dir = "ext"' 
        regexp: "extension=uploadprogress.so"
        line: "extension=uploadprogress.so"
        dest: /etc/php5/apache2/php.ini 
  when: ansible_distribution_release == "trusty"

- block:
    - name: Add uploadprogress Repo
      apt_repository: 
        repo: 'ppa:ondrej/php'

    - name: Install php-uploadprogress
      apt:
        pkg: php-uploadprogress
        state: present
        update_cache: true
  when: ansible_distribution_release == "xenial"

- name: Set Permissions
  file: 
    path: "{{ item }}"
    owner: www-data 
    group: www-data 
    recurse: yes
  with_items:
    - "{{ DRUPAL_HOME }}"

- name: Restart apache
  service:
    name: apache2
    state: restarted

- name: "Run Cron maintenance tasks"
  shell: "drush --root={{ DRUPAL_HOME }} -y -u 1 core-cron"
